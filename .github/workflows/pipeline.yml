name: OpenRouter Pipeline (A-R)

on:
  schedule:
    - cron: '0 0 * * *'  # Run daily at midnight UTC
  workflow_dispatch:  # Allow manual trigger
  push:
    branches: [ main ]
    paths:
      - 'openrouter_pipeline/**.py'
      - 'openrouter_pipeline/requirements.txt'
      - '.github/workflows/**'

jobs:
  run-pipeline:
    runs-on: ubuntu-latest
    timeout-minutes: 180  # 3 hours max
    permissions:
      contents: write  # Allow writing to repository

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      working-directory: openrouter_pipeline
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create .env file
      working-directory: openrouter_pipeline
      run: |
        echo "SUPABASE_URL=https://atilxlecbaqcksnrgzav.supabase.co" >> .env
        echo "SUPABASE_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImF0aWx4bGVjYmFxY2tzbnJnemF2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTIzOTY5MTYsImV4cCI6MjA2Nzk3MjkxNn0.sYRFyQIEzZMlgg5RtHTXDSpvxl-KrJ8E7U3_UroIJog" >> .env

    - name: Run complete pipeline
      working-directory: openrouter_pipeline
      run: |
        python Z_run_A_to_R.py

    - name: Upload pipeline report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: pipeline-execution-report
        path: openrouter_pipeline/pipeline-outputs/Z-pipeline-execution-report.txt
        retention-days: 30

    - name: Upload processed data
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: processed-data
        path: |
          openrouter_pipeline/pipeline-outputs/*.json
          openrouter_pipeline/pipeline-outputs/*-report.txt
          openrouter_pipeline/pipeline-outputs/last-run.txt
          !**/node_modules/**
        retention-days: 7

    - name: Commit processed data to repository
      if: success()
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

        # Add timestamp file to pipeline-outputs (scripts already write directly there)
        echo "Pipeline completed: $(date -u)" > openrouter_pipeline/pipeline-outputs/last-run.txt
        echo "Workflow run: ${{ github.run_number }}" >> openrouter_pipeline/pipeline-outputs/last-run.txt
        echo "Repository: ${{ github.repository }}" >> openrouter_pipeline/pipeline-outputs/last-run.txt

        # Verify files exist in pipeline-outputs
        echo "üìÅ Files in pipeline-outputs directory:"
        ls -la openrouter_pipeline/pipeline-outputs/ || echo "No files found"

        # Commit if there are changes
        git add openrouter_pipeline/pipeline-outputs/
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "OpenRouter pipeline output: Run #${{ github.run_number }} $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
          git push origin main
          echo "‚úÖ Processed data committed to repository"
        fi

    - name: Upload organized processed data
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: pipeline-outputs
        path: openrouter_pipeline/pipeline-outputs/
        retention-days: 30

    - name: Trigger Google pipeline
      if: success()
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          console.log('üöÄ OpenRouter pipeline completed successfully, triggering Google pipeline...');
          await github.rest.actions.createWorkflowDispatch({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: 'google-pipeline.yml',
            ref: 'main'
          });
          console.log('‚úÖ Google pipeline triggered');

    - name: Show failure summary
      if: failure()
      run: |
        echo "‚ùå Pipeline execution failed"
        echo "Check the pipeline report artifact for detailed error information"
        echo "The report contains:"
        echo "  - Specific script that failed"
        echo "  - Detailed error messages"
        echo "  - Stage-by-stage execution status"
        echo "  - Timing information"