name: Google Pipeline (A-F)

on:
  workflow_dispatch:  # Manual trigger only
  workflow_run:  # Sequential trigger from OpenRouter pipeline
    workflows: ["OpenRouter Pipeline (A-S)"]
    types:
      - completed
    branches: [ main ]

jobs:
  run-pipeline:
    runs-on: ubuntu-latest
    timeout-minutes: 180  # 3 hours max
    permissions:
      contents: write  # Allow writing to repository
    # Only run if manually triggered or if OpenRouter pipeline succeeded
    if: ${{ github.event_name == 'workflow_dispatch' || (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') }}

    steps:
    - name: Show trigger information
      run: |
        echo "üöÄ Google Pipeline triggered by: ${{ github.event_name }}"
        if [[ "${{ github.event_name }}" == "workflow_run" ]]; then
          echo "üìã OpenRouter pipeline status: ${{ github.event.workflow_run.conclusion }}"
          echo "üîó OpenRouter run URL: ${{ github.event.workflow_run.html_url }}"
        fi

    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Clean output directory but preserve scraped modalities
      working-directory: google_pipeline
      run: |
        echo "üßπ Smart cleaning output directory for fresh pipeline execution"
        # Backup scraped modalities if it exists (fallback for when web scraping fails)
        if [ -f "02_outputs/C-scrapped-modalities.json" ]; then
          cp 02_outputs/C-scrapped-modalities.json /tmp/C-scrapped-modalities-backup.json
          echo "üìã Backed up existing scraped modalities as fallback"
        fi

        # Clean all output files
        rm -rf 02_outputs/*

        # Restore backup if it existed
        if [ -f "/tmp/C-scrapped-modalities-backup.json" ]; then
          cp /tmp/C-scrapped-modalities-backup.json 02_outputs/C-scrapped-modalities.json
          echo "üìã Restored scraped modalities backup for fallback"
        fi

        # Keep .gitkeep if it exists
        touch 02_outputs/.gitkeep
        echo "‚úÖ Output directory cleaned with modality fallback preserved"

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      working-directory: google_pipeline
      run: |
        python -m pip install --upgrade pip
        pip install -r 03_configs/requirements.txt

    - name: Set environment variables
      working-directory: google_pipeline
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
      run: |
        echo "‚úÖ Environment variables set from GitHub secrets"

    - name: Run complete pipeline (A-F)
      working-directory: google_pipeline
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
        PIPELINE_SUPABASE_URL: ${{ secrets.PIPELINE_SUPABASE_URL }}
      run: |
        python 01_scripts/Z_run_A_to_F.py --auto-all

    - name: Upload pipeline report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: google-pipeline-execution-report
        path: google_pipeline/02_outputs/Z-pipeline-report.txt
        retention-days: 30

    - name: Upload processed data
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: google-processed-data
        path: |
          google_pipeline/02_outputs/*.json
          google_pipeline/02_outputs/*-report.txt
          google_pipeline/02_outputs/*.csv
          !**/node_modules/**
        retention-days: 7

    - name: Commit processed data to repository
      if: success()
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

        # Ensure 02_outputs directory exists
        mkdir -p google_pipeline/02_outputs

        # Add timestamp file
        echo "Google Pipeline completed: $(date -u)" > google_pipeline/02_outputs/last-run.txt
        echo "Workflow run: ${{ github.run_number }}" >> google_pipeline/02_outputs/last-run.txt
        echo "Repository: ${{ github.repository }}" >> google_pipeline/02_outputs/last-run.txt

        # Commit if there are changes
        git add google_pipeline/02_outputs/
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Google pipeline output: Run #${{ github.run_number }} $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
          git push origin main
          echo "‚úÖ Google pipeline data committed to repository"
        fi

    - name: Upload organized processed data
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: google-pipeline-outputs
        path: google_pipeline/02_outputs/
        retention-days: 30

    - name: Show failure summary
      if: failure()
      run: |
        echo "‚ùå Google Pipeline execution failed"
        echo "Check the google-pipeline-execution-report artifact for detailed error information"
        echo "The report contains:"
        echo "  - Specific script that failed"
        echo "  - Detailed error messages"
        echo "  - Stage-by-stage execution status"
        echo "  - Timing information"