name: Groq Pipeline

on:
  workflow_dispatch:  # Manual trigger
  schedule:
    # Run daily at 12:00 UTC (once per day)
    - cron: '0 12 * * *'

jobs:
  groq-pipeline:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: write  # Allow writing to repository

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y wget unzip xvfb

    - name: Install Chrome
      run: |
        wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable

    - name: Install Python dependencies
      working-directory: groq_pipeline
      run: |
        python -m pip install --upgrade pip
        pip install selenium webdriver-manager beautifulsoup4 requests

    - name: Set environment variables
      working-directory: groq_pipeline
      env:
        GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
      run: |
        echo "✅ Environment variables set from GitHub secrets"

    - name: Run Groq Pipeline
      working-directory: groq_pipeline
      env:
        GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
        DISPLAY: :99
      run: |
        echo "🚀 Starting Groq Pipeline..."
        echo "📅 Started at: $(date -u)"

        # Start virtual display for headless Chrome
        Xvfb :99 -screen 0 1920x1080x24 &

        # Run the Groq pipeline
        python -u 01_scripts/G_groq_pipeline.py

        echo "✅ Groq Pipeline completed at: $(date -u)"

    - name: Check for output files
      working-directory: groq_pipeline
      run: |
        echo "📁 Checking generated output files:"
        ls -la *.json *.csv 2>/dev/null || echo "No output files found"

        if [ -f "stage-1-scrape-production-models.json" ]; then
          echo "✅ Production models file exists"
          echo "📊 Model count: $(jq '.total_models' stage-1-scrape-production-models.json)"
        fi

        if [ -f "stage-2-scrape-rate-limits.json" ]; then
          echo "✅ Rate limits file exists"
        fi

        if [ -f "stage-3-input-output-modalities.json" ]; then
          echo "✅ Modalities file exists"
        fi

        if [ -f "stage-3-data-normalization.csv" ]; then
          echo "✅ Normalized data CSV exists"
          echo "📈 Record count: $(wc -l < stage-3-data-normalization.csv)"
        fi

    - name: Upload pipeline outputs
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: groq-pipeline-outputs
        path: |
          groq_pipeline/*.json
          groq_pipeline/*.csv
          groq_pipeline/*.log
        retention-days: 30

    - name: Commit processed data to repository
      if: success()
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

        # Ensure groq_pipeline directory exists
        mkdir -p groq_pipeline

        # Add timestamp file
        echo "Groq Pipeline completed: $(date -u)" > groq_pipeline/last-run.txt
        echo "Workflow run: ${{ github.run_number }}" >> groq_pipeline/last-run.txt
        echo "Repository: ${{ github.repository }}" >> groq_pipeline/last-run.txt

        # Add output files if they exist
        cd groq_pipeline
        if ls *.json *.csv 2>/dev/null; then
          git add *.json *.csv last-run.txt
        else
          git add last-run.txt
        fi

        # Commit if there are changes
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Groq pipeline output: Run #${{ github.run_number }} $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
          git push origin main
          echo "✅ Groq pipeline data committed to repository"
        fi

    - name: Show success summary
      if: success()
      run: |
        echo "✅ Groq Pipeline execution completed successfully"
        echo "📊 Check artifacts for detailed output files"
        echo "🕒 Completed at: $(date -u)"
        if [ -f "groq_pipeline/stage-1-scrape-production-models.json" ]; then
          echo "📈 Models extracted: $(jq '.total_models' groq_pipeline/stage-1-scrape-production-models.json)"
        fi

    - name: Show failure summary
      if: failure()
      run: |
        echo "❌ Groq Pipeline execution failed"
        echo "📋 Check the groq-pipeline-outputs artifact for error details"
        echo "🔍 Common issues:"
        echo "  - Chrome driver initialization"
        echo "  - Network connectivity to Groq docs"
        echo "  - Table structure changes on Groq website"
        echo "  - Missing GROQ_API_KEY secret"